#!/usr/bin/env bash

### Version 1.0.2
### Created by Erik Berglund
### https://github.com/erikberglund

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### DESCRIPTION
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# This script is designed to be run from an installer package as a preinstall or a postinstall script.
# This script creates a user in the target volume's user database from settings configured in this script.

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### USAGE
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# Modify the variables below to match your desired user, then include this script as a postinstall script in a payload free package.

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### CHANGE THESE VARIABLES TO CUSTOMIZE USER
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# User short name may only contain the following characters: a-z, A-Z, 0-9, _ (underscore), - (hyphen), . (period)
# It may only be 31 characters long and has to start with an alpha numeric character.
# More info here on page 66-67: https://manuals.info.apple.com/MANUALS/1000/MA1181/en_US/UserMgmt_v10.6.pdf
userShortName="" # firstnamelastname

# User full name.
userRealName="" # Firstname Lastname

# Password.
userPassword="" # password

# Make user member of the 'admin' group.
userIsAdmin="yes"

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### CHANGE THESE VARIABLES TO CUSTOMIZE USER EVEN MORE
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# Path to a picture on target volume, if it doesn't exist at script runtime it will be replaced by a default picture.
userPicture="/Library/User Pictures/Fun/Ying-Yang.png"

# If this is left empty, the script will use the standard user path: "/Users/${userShortName}"
# If 'userIsHidden' is set to 'yes', this will be overridden to "/var/${userShortName}".
# Don't add ${3} before user path, this will be read by the target system when booted.
userHomeDirectory=""

# Creates the new user's home directory from the user template.
createHomeDirectory="yes"

# Only used if 'createHomeDirectory' is set to 'yes'.
# Set to any of the localized home folder names in '/System/Library/User Template' in this variable. Example: "sv" (Swedish)
# If chosen localization doesn't exist or this is left empty, 'English' will be used.
userHomeDirectoryLocalization="English"

# Set uid of user.
# If this is left empty, the script will use the first available uid between 501-600
# If 'userIsHidden' is set to 'yes' and 'targetVolumeOsMinorVersion' is less than or equal to 9, this will be overridden to uid between 490-499
userUID=""

# Set primary group id for user.
userPrimaryGroupID="20"

# Additional groups user should be a member of, separated by semicolon (;).
# Don't add group 'admin' here, use "userIsAdmin" setting instead.
userGroups=""

# Only used if 'userIsAdmin' is set to 'yes'.
userIsHidden="no"

# Create the auto login kcpassword-file and add user to key 'autoLoginUser' in /L/P/com.apple.loginwindow-plist
userAutoLogin="yes"

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### AUTOMATIC VARIABLES
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# Setup all variables passed by installer
# More info here on page 50: https://developer.apple.com/legacy/library/documentation/DeveloperTools/Conceptual/SoftwareDistribution4/SoftwareDistribution4.pdf
installerPackagePath="${1}"  # Full path to the installation package the Installer application is processing.
destinationPath="${2}"       # Full path to the installation destination. Example: /Applications
targetVolumePath="${3}"      # Installation volume (or mountpoint) to receive the payload
rootPath="${4}"              # The root directory for the system. Example: /

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### MAIN SCRIPT
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# If a template file exists, source that to override script variables
if [[ -f "${PWD}/userTemplate.txt" ]]; then
    source "${PWD}/userTemplate.txt"
fi

# Check that we get a valid volume path as targetVolumePath, else exit.
if [[ -z ${targetVolumePath} ]] || ! [[ -d ${targetVolumePath} ]]; then
    printf "%s\n" "Variable targetVolumePath=${targetVolumePath} is not valid!";
    exit 1
fi

# Add target volumes' standrad paths to our own PATH
PATH="${targetVolumePath}/usr/bin:${targetVolumePath}/bin:${targetVolumePath}/usr/sbin:${targetVolumePath}/sbin:${PATH}"

# Get path to commands to be used in the script.
cmd_awk=$( which awk )
cmd_chown=$( which chown )
cmd_ditto=$( which ditto )
cmd_dscl=$( which dscl )
cmd_sed=$( which sed )
cmd_PlistBuddy="${targetVolumePath}/usr/libexec/PlistBuddy"

# Get target volume os minor version.
# Minor version is 9 in 10.9.5 for example.
if [[ -f ${targetVolumePath}/System/Library/CoreServices/SystemVersion.plist ]]; then
    targetVolumeOsMinorVersion=$( "${cmd_PlistBuddy}" -c "Print ProductUserVisibleVersion" "${targetVolumePath}/System/Library/CoreServices/SystemVersion.plist" | "${cmd_awk}" -F. '{ print $2 }' 2>&1  )
fi

# Check that 'userShortName' isn't too long and doesn't contain invalid characters.
if ! [[ ${userShortName} =~ ^[_a-zA-Z][-_.a-zA-Z0-9]{0,30}$ ]]; then
    printf "%s\n" "[ERROR] userShortName=${userShortName}"
    if (( 31 < ${#userShortName} )); then
        printf "%s\n" "[ERROR] User short name is longer than 31 characters!"
    fi
    
    userShortNameInvalidCharacters=$( "${cmd_sed}" -E 's/[-_.a-zA-Z0-9]//g' <<< "${userShortName}" )
    
    if (( 0 < ${#userShortNameInvalidCharacters} )); then
        printf "%s\n" "[ERROR] User short name contains invalid characters: ${userShortNameInvalidCharacters}"
    fi
    
    if ! [[ ${userShortName:0:1} =~ [_a-zA-Z] ]]; then
        printf "%s\n" "[ERROR] User short name doesn't begin with an alpha numeric character: ${userShortName:0:1}"
    fi
    
    exit 1
fi

# Clean variable 'userGroups' by removing all spaces and leading and trailing semicolons (;).
userGroups=$( "${cmd_sed}" -E 's/(^;|;$|[[:space:]]+)//g' <<< "${userGroups}" )

# If 'userIsAdmin' is set to 'yes', add it to the admin groups.
if [[ ${userIsAdmin} == yes ]]; then
    if [[ -z ${userGroups} ]]; then
        userGroups="admin"
    else
        userGroups="admin;_appserveradm;_appserverusr;${userGroups}"
    fi
fi

# If 'userIsHidden' is set to 'yes', override 'userHomeDirectory' to set the user home folder in /var
if [[ ${userIsHidden} == yes ]]; then
    userHomeDirectory="/var/${userShortName}"
fi

# If no home directory was defined, use the default user home directory path.
if [[ -z ${userHomeDirectory} ]]; then
    userHomeDirectory="/Users/${userShortName}"
fi

# If the selected path for user picture doesn't exist on target volume, add a default picture instead.
if [[ ! -f ${targetVolumePath}/${userPicture} ]]; then
    defaultUserPicture="/Library/User Pictures/Fun/Ying-Yang.png"
    printf "%s\n" "[ERROR] Selected user picture doesn't exist on target volume!"
    printf "%s\n" "[ERROR] userPicture=${userPicture}"
    printf "%s\n" "Will use the default user picture instead: ${defaultUserPicture}"
    userPicture="${defaultUserPicture}"
fi

# Database path for dscl to the user to be created.
targetVolumeDatabasePath="/Local/Default/Users/${userShortName}"

# Database path on target volume.
targetVolumeNodePath="${targetVolumePath}/var/db/dslocal/nodes/Default"

# Check that 'userShortName' doesn't already exist in the target volume database.
if "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -read "/Local/Default/Users/${userShortName}" 2>&1; then
    printf "%s\n" "A user with shortname: ${userShortName} already exists!"
    exit 1
fi

# If 'userUID' is empty, find first available uid in target volume database
if [[ -z ${userUID} ]] || [[ ${userIsHidden} == yes ]]; then
    if [[ ${userIsHidden} == yes ]] && (( targetVolumeOsMinorVersion <= 9 )); then
        startingUID="490"; endingUID="499"
    elif [[ -z ${userUID} ]]; then
        startingUID="501"; endingUID="600"
    fi
    
    if [[ -n ${startingUID} ]] && [[ -n ${endingUID} ]]; then
        printf "%s\n" "Searching for first available uid between ${startingUID}-${endingUID} in target volume database..."
        for (( availableUID=${startingUID}; availableUID<${endingUID}; availableUID++)); do
            dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -search /Local/Default/Users UniqueID ${availableUID} 2>&1 )
            if [[ -z ${dscl_output} ]]; then
                userUID="${availableUID}"
                printf "%s\n" "First available uid is ${userUID}"
                break
            fi
        done
    fi
fi

# If 'createHomeDirectory' is set to 'yes', set the available localized user template to 'path_localizedHomeDirectoryTemplate'.
if [[ ${createHomeDirectory} == yes ]]; then
    if [[ -d "/System/Library/User Template/${userHomeDirectoryLocalization}.lproj" ]]; then
        path_localizedHomeDirectoryTemplate="/System/Library/User Template/${userHomeDirectoryLocalization}.lproj/"
    elif [[ -d "/System/Library/User Template/${userHomeDirectoryLocalization}" ]]; then
        path_localizedHomeDirectoryTemplate="/System/Library/User Template/${userHomeDirectoryLocalization}/"
    else
        path_localizedHomeDirectoryTemplate="/System/Library/User Template/English.lproj/"
    fi
fi

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### START CREATING USER
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# Create user record
printf "%s\n" "Creating user record in target volume database: ${targetVolumeDatabasePath}"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -create "${targetVolumeDatabasePath}" 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Unable to create user record in target user database"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add RealName
printf "%s\n" "Adding user RealName: ${userRealName}"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${targetVolumeDatabasePath}" RealName "${userRealName}" 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Failed to set RealName"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add UniqueID
printf "%s\n" "Adding user UniqueID: ${userUID}"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${targetVolumeDatabasePath}" UniqueID ${userUID} 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Failed to set UniqueID"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add PrimaryGroup
printf "%s\n" "Adding user PrimaryGroupID: ${userPrimaryGroupID}"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${targetVolumeDatabasePath}" PrimaryGroupID ${userPrimaryGroupID} 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Failed to set PrimaryGroup"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add NFSHomeDirectory
printf "%s\n" "Adding user NFSHomeDirectory: ${userHomeDirectory}"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${targetVolumeDatabasePath}" NFSHomeDirectory "${userHomeDirectory}" 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Failed to set NFSHomeDirectory"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add UserShell
printf "%s\n" "Adding user UserShell: /bin/bash"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${targetVolumeDatabasePath}" UserShell '/bin/bash' 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Failed to set UserShell"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add UserPicture
printf "%s\n" "Adding user UserPicture: ${userPicture}"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${targetVolumeDatabasePath}" Picture "${userPicture}" 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Failed to set UserShell"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add Password
printf "%s\n" "Adding user Password: *******"
dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -passwd "${targetVolumeDatabasePath}" "${userPassword}" 2>&1 )
dscl_exit_status=${?}
if [[ ${dscl_exit_status} -ne 0 ]]; then
    printf "%s\n" "[ERROR] Failed to set Password"
    printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
    printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
    exit ${dscl_exit_status}
fi

# Add user to selected groups
if [[ -n ${userGroups} ]]; then
    IFS=';' read -ra groupArray <<< "${userGroups}"
    for i in "${groupArray[@]}"; do
        groupName="${groupArray[i]}"
        groupFileName="${groupName}.plist"
        groupFilePath="${targetVolumeNodePath}/groups/${groupFileName}"
        groupDatabasePath="/Local/Default/Groups/${groupName}"

        if [[ -f ${groupFilePath} ]]; then
            dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${groupDatabasePath}" GroupMembership "${userShortName}" 2>&1 )
            dscl_exit_status=${?}
            if [[ ${dscl_exit_status} -ne 0 ]]; then
                printf "%s\n" "[ERROR] Failed to add user to group: ${groupName}"
                printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
                printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
                exit ${dscl_exit_status}
            fi
        else
            printf "%s\n" "Group ${groupName} does not exist!"
            printf "%s\n" "Skipping group..."
        fi
    done
fi

# Add IsHidden setting
if [[ ${userIsHidden} == yes ]]; then
    printf "%s\n" "Setting user: ${userShortName} as hidden"
    
    # If target is 10.10 or higher, set 'IsHidden' in user record to YES
    if (( 10 <= targetVolumeOsMinorVersion )); then
        dscl_output=$( "${cmd_dscl}" -f "${targetVolumeNodePath}" localonly -append "${targetVolumeDatabasePath}" IsHidden 1 2>&1 )
        dscl_exit_status=${?}
        if [[ ${dscl_exit_status} -ne 0 ]]; then
            printf "%s\n" "[ERROR] Failed to set hidden flag on user: ${userShortName}"
            printf "%s\n" "[ERROR] dscl_exit_status=${dscl_exit_status}"
            printf "%s\n" "[ERROR] dscl_output=${dscl_output}"
            exit ${dscl_exit_status}
        fi
        
        # If target is 10.9 or lower, add user to 'HiddenUsersList' in /L/P/com.apple.loginwindow.plist
    elif (( targetVolumeOsMinorVersion <= 9 )); then
        
        #TO-DO - Add Hide500Users.
        
        #TO-DO - Read HiddenUsersList if more than one user should be hidden.
        
        plistBuddy_output=$( "${cmd_PlistBuddy}" -c "Add :HiddenUsersList array" "${targetVolumePath}/Library/Preferences/com.apple.loginwindow.plist" 2>&1 )
        plistBuddy_exit_status=${?}
        if [[ ${plistBuddy_exit_status} -ne 0 ]] && ! [[ ${plistBuddy_output} =~ "Entry Already Exists" ]]; then
            printf "%s\n" "[ERROR] Failed to create array in plist: ${targetVolumePath}/Library/Preferences/com.apple.loginwindow.plist"
            printf "%s\n" "[ERROR] plistBuddy_exit_status=${plistBuddy_exit_status}"
            printf "%s\n" "[ERROR] plistBuddy_output=${plistBuddy_output}"
            exit ${plistBuddy_exit_status}
        fi
        
        plistBuddy_output=$( "${cmd_PlistBuddy}" -c "Add :HiddenUsersList: string ${userShortName}" "${targetVolumePath}/Library/Preferences/com.apple.loginwindow.plist" 2>&1 )
        plistBuddy_exit_status=${?}
        if [[ ${plistBuddy_exit_status} -ne 0 ]]; then
            printf "%s\n" "[ERROR] Failed to add user to HiddenUsersList array in plist: ${targetVolumePath}/Library/Preferences/com.apple.loginwindow.plist"
            printf "%s\n" "[ERROR] plistBuddy_exit_status=${plistBuddy_exit_status}"
            printf "%s\n" "[ERROR] plistBuddy_output=${plistBuddy_output}"
            exit ${plistBuddy_exit_status}
        fi
    fi
fi

# Create user home folder
if [[ ${createHomeDirectory} == yes ]]; then
    printf "%s\n" "Creating user home folder..."
    ditto_output=$( "${cmd_ditto}" "${path_localizedHomeDirectoryTemplate}" "${targetVolumePath}/${userHomeDirectory}" 2>&1 )
    ditto_exit_status=${?}
    
    if [[ ${ditto_exit_status} -ne 0 ]]; then
        printf "%s\n" "[ERROR] Failed to copy (ditto) user home folder template to: ${targetVolumePath}/${userHomeDirectory}"
        printf "%s\n" "[ERROR] ditto_exit_status=${ditto_exit_status}"
        printf "%s\n" "[ERROR] ditto_output=${ditto_output}"
        exit ${ditto_exit_status}
    fi
    
    printf "%s\n" "Setting correct permissions on user home folder..."
    chown_output=$( "${cmd_chown}" -R ${userUID}:${userPrimaryGroupID} "${targetVolumePath}/${userHomeDirectory}" 2>&1 )
    chown_exit_status=${?}
    
    if [[ ${chown_exit_status} -ne 0 ]]; then
        printf "%s\n" "[ERROR] Failed to copy (ditto) user home folder template to: ${targetVolumePath}/${userHomeDirectory}"
        printf "%s\n" "[ERROR] chown_exit_status=${chown_exit_status}"
        printf "%s\n" "[ERROR] chown_output=${chown_output}"
        exit ${chown_exit_status}
    fi
fi

# Add autoLoginUser setting
if [[ ${userAutoLogin} == yes ]]; then
    printf "%s\n" "Setting user: ${userShortName} to log in automatically"
    
    "${cmd_PlistBuddy}" -c "Delete :autoLoginUser" "${targetVolumePath}/Library/Preferences/com.apple.loginwindow.plist" > /dev/null 2>&1
    "${cmd_PlistBuddy}" -c "Delete :autoLoginUserUID" "${targetVolumePath}/Library/Preferences/com.apple.loginwindow.plist" > /dev/null 2>&1
    
    plistBuddy_output=$( "${cmd_PlistBuddy}" -c "Add :autoLoginUser string ${userShortName}" "${targetVolumePath}/Library/Preferences/com.apple.loginwindow.plist" 2>&1 )
    plistBuddy_exit_status=${?}
    if [[ ${plistBuddy_exit_status} -ne 0 ]]; then
        printf "%s\n" "[ERROR] Failed to set auto login for user: ${userShortName}"
        printf "%s\n" "[ERROR] plistBuddy_exit_status=${plistBuddy_exit_status}"
        printf "%s\n" "[ERROR] plistBuddy_output=${plistBuddy_output}"
        exit ${plistBuddy_exit_status}
    fi
    
    # Create encoded password for /etc/kcpassword
    # I created a BASH native version from the perl script found here: http://www.brock-family.org/gavin/perl/kcpassword.html
    key=( '125' '137' '82' '35' '210' '188' '221' '234' '163' '185' '31' )
    key_length=${#key}
    userPasswordEncoded=""

    for ((i=0; i<${#userPassword}; i++ )); do
        original_char=$( printf "%d" "'${userPassword:$i:1}" )
        xor_char=$( printf \\$( printf '%03o' $(( original_char ^ ${key[$(( i % key_length ))]} )) ))
        userPasswordEncoded="${userPasswordEncoded}${xor_char}"
    done

    userPasswordEncoded_length=$(( ${#userPasswordEncoded} % 12 ))

    until (( userPasswordEncoded_length == 12 )); do
        key_char=$( printf \\$( printf '%03o' ${key[$(( userPasswordEncoded_length % 12 ))]} ))
        userPasswordEncoded="${userPasswordEncoded}${key_char}"
        userPasswordEncoded_length=$((userPasswordEncoded_length+1))
    done
    
    if [[ -n ${userPasswordEncoded} ]]; then
        echo -n "${userPasswordEncoded}" > "${targetVolumePath}/etc/kcpassword"
        "${cmd_chmod}" 0600 "${targetVolumePath}/etc/kcpassword"
    else
        printf "%s\n" "[ERROR] Encoded password for auto login was empty!"  
        exit 1
    fi
fi

printf "%s\n" "Adding user: ${userShortName} was successful!"

exit 0
