#!/usr/bin/env bash

### Version 1.0.0
### Created by Erik Berglund
### https://github.com/erikberglund

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### DESCRIPTION
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# 

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### USAGE
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# Usage: ./osxImageModifier [options] <argv>...
#
# Options:
#  -i       (Optional) Input directory to search for os x images
#  -o       (Optional) Output directory
#  -s                  Script path

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### VARIABLES
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

redirect_out="1> /dev/null"

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### FUNCIONS
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

parse_opts() {
    while getopts "i:o:s:" opt; do
        case ${opt} in
            i) input_directory="${OPTARG%/}" ;;
            o) output_directory="${OPTARG%/}" ;;
            s) path_script="${OPTARG%/}" ;;
            \?) usage; exit 1;;
            :) usage; exit 1;;
        esac
    done

    if [[ -z ${input_directory} ]]; then
        input_directory="${PWD}"
    elif ! [[ -d ${input_directory} ]]; then
        error "${input_directory} is not a directory"
    fi
        
    printf "%s\n" "Input directory: ${input_directory}"    
    
    if [[ -z ${output_directory} ]]; then
        output_directory="${input_directory}"
    elif ! [[ -d ${output_directory} ]]; then
        error "${output_directory} is not a directory"
    fi
    
    printf "%s\n" "Output directory: ${output_directory}"
    
    if [[ -z ${path_script} ]]; then
        usage; exit 1
    elif ! [[ -f ${path_script} ]]; then
        error "${path_script}: No such file or directory."
    fi
}

usage() {
    printf "%s\n" "Usage: ./${0##*/} [options] <argv>..."
    printf "%s\n" "Options:"
    printf "  %s\t%s\n" "-i" "(Optional) Input directory"
    printf "  %s\t%s\n" "-i" "(Optional) Output directory"
    printf "  %s\t%s\n" "-s" "Script to run"
    printf "\n"
}

error() {
    printf "%s\n" "${1}, exiting script..." >&2; exit 1
}

#//////////////////////////////////////////////////////////////////////////////////////////////////
###
### MAIN SCRIPT
###
#//////////////////////////////////////////////////////////////////////////////////////////////////

# Verify script is run with administrator privileges
if [[ ${EUID} -ne 0 ]]; then
    error "This script must be run as root!"
fi

# Stop globbing from printing itself if there are no matches
shopt -s nullglob

# Parse passed arguments
parse_opts "${@}"

# Loop through all images and modify them if needed
for osx_image in "${input_directory}"/*\.dmg; do

    # Reset variables
    osx_image_add_recovery="False"
    osx_image_modified="False"
    osx_image_recreate="False"
    osx_image_convert="False"
    osx_image_scan="False"
    
    printf "%s\n" "Checking ${osx_image##*/}..."
    
    # If image is already mounted, exit script and print it's current mountpoint.
    # FIXME - This check should allow the script to use the mounted path instead of skipping, but for now just skip.
    osx_image_mountpoint=$( hdiutil info -plist | xpath "/plist/dict/key[.='images']/following-sibling::array/dict/key[.='image-path']/following-sibling::string[1][contains(., \"${osx_image}\")]/../key[.='system-entities']/following-sibling::array/dict/key[.='mount-point']/following-sibling::string/text()" 2>/dev/null )
    if [[ -d ${osx_image_mountpoint} ]]; then
        printf "%s\n" "${osx_image##*/} is already mounted at: ${osx_image_mountpoint}, skipping" >&2
        continue
    fi
    
    # Create mountpoint for image
    osx_image_mountpoint=$( mktemp -d /private/tmp/dmg.XXXXX ) || error "Unable to create image mountpoint"
    osx_image_shadow="/private/tmp/shadow.$( env LC_CTYPE=C tr -dc "a-zA-Z0-9-_\$\?" < /dev/urandom | head -c 5 )"
    
    # Attach current dmg at 'osx_image_mountpoint'
    if hdiutil attach "${osx_image}" -noverify -nobrowse -readwrite -owners on -mountpoint "${osx_image_mountpoint}" -shadow "${osx_image_shadow}" ; then
        
        # Add dmg mountpoint to mountpoints to remove after checking has finished
        mountpoints+=( "${osx_image_mountpoint}" )
        
        # Verify SystemVersion.plist exists
        systemversion_path="${base_system_mountpoint}/System/Library/CoreServices/SystemVersion.plist"
        if [[ -f ${systemversion_path} ]]; then
            
            # Get os build and version
            os_version=$( /usr/libexec/PlistBuddy -c "Print :ProductUserVisibleVersion" "${systemversion_path}" )
            printf "%s\n" "OS Version: ${os_version}"
            
            os_build_version=$( /usr/libexec/PlistBuddy -c "Print :ProductBuildVersion" "${systemversion_path}" )
            printf "%s\n" "OS Build: ${os_build_version}"
        else
            printf "%s\n" "SystemVersion.plist not found inside ${osx_image}, skipping image..." >&2
            continue
        fi
                
        # Prepare image output name and path
        osx_image_name=$( basename "${osx_image}" )
        if [[ ${input_directory} == ${output_directory} ]]; then
            osx_image_output_path="${output_directory}/$( sed -E "s/(\.hfs\.dmg|\.dmg)/_$( date +%F_%H%M%S ).hfs.dmg/" <<< ${osx_image_name} )"
        else
            osx_image_output_path="${output_directory}/${osx_image_name}"
        fi
        osx_image_output_name=$( basename "${osx_image_output_path}" )
        
        # Run the passed script
        printf "%s\n" "Running script: ${path_script##*/}"
        source "${path_script}"
        
        # Get size for disk image
        osx_image_size=$( df "${osx_image_mountpoint}" | awk -v mountpoint="${osx_image_mountpoint}" '{ if ($9 == mountpoint ) print $2; }' )
        if [[ ${osx_image_size} =~ ^[0-9]+$ ]]; then
            printf "%s\n" "Volume size (bytes): $((${osx_image_size}*512))"
        else
            printf "%s\n" "Volume size returned for volume at path: ${osx_image_mountpoint} is not valid!" >&2
            continue
        fi
        
        # Get used size for disk image
        osx_image_size_used=$( df "${osx_image_mountpoint}" | awk -v mountpoint="${osx_image_mountpoint}" '{ if ($9 == mountpoint ) print $3; }' )
        if [[ ${osx_image_size_used} =~ ^[0-9]+$ ]]; then
            printf "%s\n" "Volume size used (bytes): $((${osx_image_size_used}*512))"
        else
            printf "%s\n" "Volume size used returned for volume at path: ${osx_image_mountpoint} is not valid!" >&2
            continue
        fi
        
        if [[ ${osx_image_recreate} == True ]]; then
            printf "%s\n" "Recreating image to use GUID partition scheme..."
                        
            # Update values for osx_image as this will be the new target from here on
            osx_image="$( dirname "${osx_image_output_path}" )/$( sed -E 's/(\.hfs\.dmg|\.dmg)/_GUID.hfs.dmg/' <<< ${osx_image_output_name} )"
            
            # Add 1GB (2097152 512-byte sectors) to allow adding a recovery partiton
            if ! hdiutil create -srcfolder "${osx_image_mountpoint}" -sectors $((${osx_image_size_used}+2097152)) -volname "Macintosh HD" -format UDRW -layout GPTSPUD "${osx_image}" ; then
                printf "%s\n" "Recreating image mounted at: ${osx_image_mountpoint} failed" >&2
                continue
            fi
            
            osx_image_mountpoint=$( mktemp -d /private/tmp/dmg.XXXXX ) || error "Unable to create image mountpoint"
            
            # Attach the newly created disk image
            if ! hdiutil attach "${osx_image}" -noverify -nobrowse -readwrite -owners on -mountpoint "${osx_image_mountpoint}" ; then
                printf "%s\n" "Attaching: ${osx_image} failed" >&2
                continue
            fi
            
            # Add dmg mountpoint to mountpoints to remove after checking has finished
            mountpoints+=( "${osx_image_mountpoint}" )
            
            # Set to add recovery partition
            osx_image_add_recovery='True'
            osx_image_convert='True'
        fi
        
        if [[ ${osx_image_add_recovery} == True ]]; then
            printf "%s\n" "Adding recovery partition..."
            
            # Verify recovery image path is set and valid
            if ! [[ -f ${recovery_image} ]]; then
                printf "%s\n" "Recovery Image: ${recovery_image} NOT found!" >&2
                continue
            fi
            
            # Verify the recovery source image have a recovery partition
            # FIXME - This requires that no volume is mounted, possibly check for that or use diskutil if mounted
            if ! (( $( hdiutil pmap "${recovery_image}" | awk '/Apple_Boot/ || /Recovery HD/ { print 1 }' ) )); then
                printf "%s\n" "Source disk image: ${recovery_image##*/} have NO recovery partition!" >&2
            fi
            
            recovery_image_mountpoint=$( mktemp -d /private/tmp/dmg.XXXXX ) || error "Unable to create recovery image mountpoint"
            
            # Attach the recovery source image
            if ! hdiutil attach "${recovery_image}" -noverify -nobrowse -readonly -owners on -mountpoint "${recovery_image_mountpoint}"; then
                printf "%s\n" "Attaching: ${recovery_image##*/} failed" >&2
                continue
            fi
            
            # Add dmg mountpoint to mountpoints to remove after checking has finished
            mountpoints+=( "${recovery_image_mountpoint}" )
            
            # Get the recovery hd device identifier
            recovery_image_volume_device_identifier="$( diskutil list "${recovery_image_mountpoint}" | awk '/Apple_Boot/ || /Recovery HD/ { print $NF }' )"
            
            # Get the image system volume device node
            osx_image_volume_device_node=$( diskutil info "${osx_image_mountpoint}" | awk '/Device Node:/ { print $NF }' )
            
            # Add dmg mountpoint to mountpoints to remove after checking has finished
            mountpoints+=( "${osx_image_volume_device_node}" )
            
            # Resize the image system volume to fit recovery partition
            # FIXME - This assumes the disk has free space, should check
            if ! diskutil quiet resizeVolume "${osx_image_volume_device_node}" "${osx_image_size_used}S" JHFS+ EmptyRecoveryHD 1m; then
                printf "%s\n" "Resizing volume at device node: ${osx_image_volume_device_node} failed" >&2
                continue
            fi
            
            # Get the new image recovery volume device identifier
            osx_recovery_image_volume_device_identifier="$( diskutil list "${osx_image_volume_device_node}" | awk '/EmptyRecoveryHD/ { print $NF }' )"
            
            if [[ ${recovery_image_volume_device_identifier} =~ disk ]] && [[ ${osx_recovery_image_volume_device_identifier} =~ disk ]]; then
                printf "%s\n" "Restoring source recovery partition on disk image..."
                
                # Restore recovery partition from source image to os x image
                if ! asr restoreexact --source "/dev/${recovery_image_volume_device_identifier}" --target "/dev/${osx_recovery_image_volume_device_identifier}" --erase --noprompt; then
                    printf "%s\n" "Restoring source recovery partition failed!"
                    continue
                fi
            else
                printf "%s\n" "A device identifier could not be found!" >&2
                printf "%s\n" "recovery_image_volume_device_identifier=${recovery_image_volume_device_identifier}" >&2
                printf "%s\n" "osx_recovery_image_volume_device_identifier=${osx_recovery_image_volume_device_identifier}" >&2
                exit 1
            fi
            osx_image_convert='True'
        fi
                
        # Detach mounted dmgs
        printf "%s\n" "Unmounting volumes at mountpoints: ${mountpoints[@]}"
        for mountpoint in "${mountpoints[@]}"; do
            
            if ! hdiutil detach "${mountpoint}" -force ; then
                printf "%s\n" "Detaching image mounted at: ${mountpoint} failed" >&2
                mountpoint="/Volumes/$( basename "${mountpoint}" )"
            else
                rm -rf "${mountpoint}" || printf "%s\n" "Removing mountpoint folder: ${mountpoint} failed!" >&2
                continue
            fi
            
            # Try again 
            if ! hdiutil detach "${mountpoint}" -force ; then
                printf "%s\n" "Detaching image mounted at: ${mountpoint} failed" >&2
            else
                rm -rf "${mountpoint}" || printf "%s\n" "Removing mountpoint folder: ${mountpoint} failed!" >&2
                continue
            fi
        done
                    
        # If image was modified, write shadow data into dmg
        if [[ ${osx_image_recreate} != True ]] && [[ ${osx_image_modified} == True ]]; then
            printf "%s\n" "Converting image and shadow to output: ${osx_image_output_path}..."
            if ! hdiutil convert -format UDZO -o "${osx_image_output_path}" "${osx_image}" -shadow "${osx_image_shadow}" ; then
                printf "%s\n" "Converting image and shadow failed!"
                continue
            fi
            osx_image_scan='True'
            osx_image_convert='False'
        fi
        
        # Convert to UDZO
        if [[ ${osx_image_convert} == True ]]; then
            printf "%s\n" "Converting image to output: ${osx_image_output_path}..."
            if ! hdiutil convert -format UDZO -o "${osx_image_output_path}" "${osx_image}" ; then
                printf "%s\n" "Converting image and shadow failed!"
                continue
            fi
            osx_image_scan='True'
        fi 
        
        # Scan image for restore
        if [[ ${osx_image_scan} == True ]]; then
            printf "%s\n" "Scanning image for restore..."
            if ! asr imagescan --source "${osx_image_output_path:-${osx_image}}" ; then
                printf "%s\n" "Scanning image for restore failed!"
                exit 1
            fi
        fi
    else
        error "Attaching: ${osx_image} failed"
    fi
    
    # Remove temporary image mountpoint if still exists
    if [[ -f ${osx_image_mountpoint} ]]; then
        rm -rf "${osx_image_mountpoint}" || printf "%s\n" "Removing folder: ${osx_image_mountpoint} failed!" >&2
    fi
    
    # Remove temporary shadow file if still exists
    if [[ -f ${osx_image_shadow} ]]; then
        rm -rf "${osx_image_shadow}" || printf "%s\n" "Removing folder: ${osx_image_shadow} failed!" >&2
    fi
done

# Restore globbing behaviour.
shopt -u nullglob

exit 0